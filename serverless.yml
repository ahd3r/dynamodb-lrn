service: ride-service5

frameworkVersion: '3'

package:
  individually: true
  excludeDevDependencies: true

provider:
  name: aws
  region: us-east-1
  runtime: nodejs16.x
  memorySize: 512
  timeout: 10 # 10 sec
  logRetentionInDays: 14
  architecture: arm64
  # versionFunctions: false
  stage: dev
  environment:
    SERVICE_NAME: test-test-test

functions:
  getRides:
    handler: index.getMany
    role: lambdaRole3
    events:
      - httpApi:
          path: /
          method: get
  getRide:
    handler: index.getOne
    role: lambdaRole3
    events:
      - httpApi:
          path: /{id}
          method: get
  createOneRide:
    handler: index.createOne
    role: lambdaRole3
    events:
      - httpApi:
          path: /
          method: post
  createManyRides:
    handler: index.createMany
    role: lambdaRole3
    events:
      - httpApi:
          path: /many
          method: post
  updateOneRide:
    handler: index.updateOne
    role: lambdaRole3
    events:
      - httpApi:
          path: /{id}
          method: patch
  updateManyRides:
    handler: index.updateMany
    role: lambdaRole3
    events:
      - httpApi:
          path: /
          method: patch
  deleteOneRide:
    handler: index.deleteOne
    role: lambdaRole3
    events:
      - httpApi:
          path: /{id}
          method: delete
  deleteManyRides:
    handler: index.deleteMany
    role: lambdaRole3
    events:
      - httpApi:
          path: /
          method: delete

resources:
  Resources:
    lambdaRole3:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: lambdaRole3
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: lambdaPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'dynamodb:*'
                    - 'logs:*'
                  Resource: '*'
    lambdaTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: entity
            AttributeType: S
          - AttributeName: created
            AttributeType: N
          - AttributeName: passengerAmount
            AttributeType: N
          - AttributeName: carYear
            AttributeType: N
          - AttributeName: carMark
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: entity
            KeyType: HASH # partition key
          - AttributeName: created # since you can do a lot of filter with this
            KeyType: RANGE # sort key
        GlobalSecondaryIndexes: # can to add this in going on table
          - IndexName: CarIndex
            KeySchema:
              - AttributeName: carMark
                KeyType: HASH
              - AttributeName: carYear
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
          - IndexName: CarMarkIndex
            KeySchema:
              - AttributeName: carMark
                KeyType: HASH
              - AttributeName: created
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
          - IndexName: PassengerRideIndex
            KeySchema:
              - AttributeName: entity
                KeyType: HASH
              - AttributeName: passengerAmount
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
          - IndexName: PassengerIndex
            KeySchema:
              - AttributeName: passengerAmount
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        TableName: ${self:service}-customerTestTable3
